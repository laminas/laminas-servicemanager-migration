{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"laminas-servicemanager-migration üá∑üá∫ –†—É—Å—Å–∫–∏–º –≥—Ä–∞–∂–¥–∞–Ω–∞–º –ú—ã, —É—á–∞—Å—Ç–Ω–∏–∫–∏ Laminas, —Ä–æ–¥–∏–ª–∏—Å—å –∏ –∂–∏–≤–µ–º –≤ —Ä–∞–∑–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∞—Ö. –£ –º–Ω–æ–≥–∏—Ö –∏–∑ –Ω–∞—Å –µ—Å—Ç—å –¥—Ä—É–∑—å—è, —Ä–æ–¥—Å—Ç–≤–µ–Ω–Ω–∏–∫–∏ –∏ –∫–æ–ª–ª–µ–≥–∏ –∫–∞–∫ –≤ –†–æ—Å—Å–∏–∏, —Ç–∞–∫ –∏ –≤ –£–∫—Ä–∞–∏–Ω–µ. –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∏–∑ –Ω–∞—Å —Ä–æ–¥–∏–ª–∏—Å—å –≤ –†–æ—Å—Å–∏–∏. –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∏–∑ –Ω–∞—Å –∂–∏–≤—É—Ç –≤ –†–æ—Å—Å–∏–∏. –£ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –±–∞–±—É—à–∫–∏ –∏ –¥–µ–¥—É—à–∫–∏ —Å—Ä–∞–∂–∞–ª–∏—Å—å —Å —Ñ–∞—à–∏—Å—Ç–∞–º–∏ –≤–æ –í—Ç–æ—Ä–æ–π –º–∏—Ä–æ–≤–æ–π –≤–æ–π–Ω–µ. –ó–¥–µ—Å—å –Ω–∏–∫—Ç–æ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ñ–∞—à–∏–∑–º. –£ –æ–¥–Ω–æ–≥–æ –∏–∑ –Ω–∞—Å –µ—Å—Ç—å —É–∫—Ä–∞–∏–Ω—Å–∫–∞—è —Ä–æ–¥—Å—Ç–≤–µ–Ω–Ω–∏—Ü–∞, –∫–æ—Ç–æ—Ä–∞—è —Å–ø–∞—Å–ª–∞—Å—å –∏–∑ –¥–æ–º–∞ –≤–º–µ—Å—Ç–µ —Å —Å—ã–Ω–æ–º. –ü–æ–µ–∑–¥ –∑–∞–¥–µ—Ä–∂–∞–ª—Å—è –∏–∑-–∑–∞ –±–æ–º–±–µ–∂–∫–∏ –Ω–∞ –¥–æ—Ä–æ–≥–µ –≤–ø–µ—Ä–µ–¥–∏. –£ –Ω–∞—Å –µ—Å—Ç—å –¥—Ä—É–∑—å—è, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä—è—á—É—Ç—Å—è –≤ –±–æ–º–±–æ—É–±–µ–∂–∏—â–∞—Ö. –ú—ã —Å —Ç—Ä–µ–≤–æ–≥–æ–π –∂–¥–µ–º –≤–µ—Å—Ç–æ—á–∫–∏ –æ—Ç –Ω–∏—Ö –ø–æ—Å–ª–µ –≤–æ–∑–¥—É—à–Ω—ã—Ö –Ω–∞–ª–µ—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –±–µ—Å–ø–æ—Ä—è–¥–æ—á–Ω–æ –Ω–∞–Ω–æ—Å—è—Ç —É–¥–∞—Ä—ã –∏ –ø–æ–ø–∞–¥–∞—é—Ç –ø–æ –±–æ–ª—å–Ω–∏—Ü–∞–º, —à–∫–æ–ª–∞–º, –¥–µ—Ç—Å–∫–∏–º —Å–∞–¥–∞–º –∏ –¥–æ–º–∞–º. –ú—ã –Ω–µ –±–µ—Ä–µ–º —ç—Ç–æ –∏–∑ –∫–∞–∫–∏—Ö-–ª–∏–±–æ –°–ú–ò. –ú—ã –Ω–∞–±–ª—é–¥–∞–µ–º —ç—Ç–æ –Ω–∞–ø—Ä—è–º—É—é. –í—ã –¥–æ–≤–µ—Ä—è–µ—Ç–µ –Ω–∞–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ, —á—Ç–æ–± –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–∞—à–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã, –∏ –º—ã –ø—Ä–æ—Å–∏–º –≤–∞—Å –¥–æ–≤–µ—Ä–∏—Ç—å—Å—è –Ω–∞–º –≤–Ω–æ–≤—å. –ú—ã –Ω—É–∂–¥–∞–µ–º—Å—è –≤ –ø–æ–º–æ—â–∏. –í—ã—Ö–æ–¥–∏—Ç–µ –∏ –ø—Ä–æ—Ç–µ—Å—Ç—É–π—Ç–µ –ø—Ä–æ—Ç–∏–≤ —ç—Ç–æ–π –±–µ—Å–ø–æ–ª–µ–∑–Ω–æ–π –≤–æ–π–Ω—ã. –û—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∫—Ä–æ–≤–æ–ø—Ä–æ–ª–∏—Ç–∏–µ. –°–∫–∞–∂–∏—Ç–µ \"–ù–µ—Ç –≤–æ–π–Ω–µ!\" üá∫üá∏ To Citizens of Russia We at Laminas come from all over the world. Many of us have friends, family and colleagues in both Russia and Ukraine. Some of us were born in Russia. Some of us currently live in Russia. Some have grandparents who fought Nazis in World War II. Nobody here supports fascism. One team member has a Ukrainian relative who fled her home with her son. The train was delayed due to bombing on the road ahead. We have friends who are hiding in bomb shelters. We anxiously follow up on them after the air raids, which indiscriminately fire at hospitals, schools, kindergartens and houses. We're not taking this from any media. These are our actual experiences. You trust us enough to use our software. We ask that you trust us to say the truth on this. We need your help. Go out and protest this unnecessary war. Stop the bloodshed. Say \"stop the war!\" Migrate your code to laminas-servicemanager 4.x compatibility utilizing Rector rules. Installation Run the following to install this library: $ composer require laminas/laminas-servicemanager-migration Documentation Browse the documentation online at https://docs.laminas.dev/laminas-servicemanager-migration/ Support Issues Forum","title":"Home"},{"location":"#laminas-servicemanager-migration","text":"","title":"laminas-servicemanager-migration"},{"location":"#_1","text":"–ú—ã, —É—á–∞—Å—Ç–Ω–∏–∫–∏ Laminas, —Ä–æ–¥–∏–ª–∏—Å—å –∏ –∂–∏–≤–µ–º –≤ —Ä–∞–∑–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∞—Ö. –£ –º–Ω–æ–≥–∏—Ö –∏–∑ –Ω–∞—Å –µ—Å—Ç—å –¥—Ä—É–∑—å—è, —Ä–æ–¥—Å—Ç–≤–µ–Ω–Ω–∏–∫–∏ –∏ –∫–æ–ª–ª–µ–≥–∏ –∫–∞–∫ –≤ –†–æ—Å—Å–∏–∏, —Ç–∞–∫ –∏ –≤ –£–∫—Ä–∞–∏–Ω–µ. –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∏–∑ –Ω–∞—Å —Ä–æ–¥–∏–ª–∏—Å—å –≤ –†–æ—Å—Å–∏–∏. –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∏–∑ –Ω–∞—Å –∂–∏–≤—É—Ç –≤ –†–æ—Å—Å–∏–∏. –£ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –±–∞–±—É—à–∫–∏ –∏ –¥–µ–¥—É—à–∫–∏ —Å—Ä–∞–∂–∞–ª–∏—Å—å —Å —Ñ–∞—à–∏—Å—Ç–∞–º–∏ –≤–æ –í—Ç–æ—Ä–æ–π –º–∏—Ä–æ–≤–æ–π –≤–æ–π–Ω–µ. –ó–¥–µ—Å—å –Ω–∏–∫—Ç–æ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ñ–∞—à–∏–∑–º. –£ –æ–¥–Ω–æ–≥–æ –∏–∑ –Ω–∞—Å –µ—Å—Ç—å —É–∫—Ä–∞–∏–Ω—Å–∫–∞—è —Ä–æ–¥—Å—Ç–≤–µ–Ω–Ω–∏—Ü–∞, –∫–æ—Ç–æ—Ä–∞—è —Å–ø–∞—Å–ª–∞—Å—å –∏–∑ –¥–æ–º–∞ –≤–º–µ—Å—Ç–µ —Å —Å—ã–Ω–æ–º. –ü–æ–µ–∑–¥ –∑–∞–¥–µ—Ä–∂–∞–ª—Å—è –∏–∑-–∑–∞ –±–æ–º–±–µ–∂–∫–∏ –Ω–∞ –¥–æ—Ä–æ–≥–µ –≤–ø–µ—Ä–µ–¥–∏. –£ –Ω–∞—Å –µ—Å—Ç—å –¥—Ä—É–∑—å—è, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä—è—á—É—Ç—Å—è –≤ –±–æ–º–±–æ—É–±–µ–∂–∏—â–∞—Ö. –ú—ã —Å —Ç—Ä–µ–≤–æ–≥–æ–π –∂–¥–µ–º –≤–µ—Å—Ç–æ—á–∫–∏ –æ—Ç –Ω–∏—Ö –ø–æ—Å–ª–µ –≤–æ–∑–¥—É—à–Ω—ã—Ö –Ω–∞–ª–µ—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –±–µ—Å–ø–æ—Ä—è–¥–æ—á–Ω–æ –Ω–∞–Ω–æ—Å—è—Ç —É–¥–∞—Ä—ã –∏ –ø–æ–ø–∞–¥–∞—é—Ç –ø–æ –±–æ–ª—å–Ω–∏—Ü–∞–º, —à–∫–æ–ª–∞–º, –¥–µ—Ç—Å–∫–∏–º —Å–∞–¥–∞–º –∏ –¥–æ–º–∞–º. –ú—ã –Ω–µ –±–µ—Ä–µ–º —ç—Ç–æ –∏–∑ –∫–∞–∫–∏—Ö-–ª–∏–±–æ –°–ú–ò. –ú—ã –Ω–∞–±–ª—é–¥–∞–µ–º —ç—Ç–æ –Ω–∞–ø—Ä—è–º—É—é. –í—ã –¥–æ–≤–µ—Ä—è–µ—Ç–µ –Ω–∞–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ, —á—Ç–æ–± –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–∞—à–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã, –∏ –º—ã –ø—Ä–æ—Å–∏–º –≤–∞—Å –¥–æ–≤–µ—Ä–∏—Ç—å—Å—è –Ω–∞–º –≤–Ω–æ–≤—å. –ú—ã –Ω—É–∂–¥–∞–µ–º—Å—è –≤ –ø–æ–º–æ—â–∏. –í—ã—Ö–æ–¥–∏—Ç–µ –∏ –ø—Ä–æ—Ç–µ—Å—Ç—É–π—Ç–µ –ø—Ä–æ—Ç–∏–≤ —ç—Ç–æ–π –±–µ—Å–ø–æ–ª–µ–∑–Ω–æ–π –≤–æ–π–Ω—ã. –û—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∫—Ä–æ–≤–æ–ø—Ä–æ–ª–∏—Ç–∏–µ. –°–∫–∞–∂–∏—Ç–µ \"–ù–µ—Ç –≤–æ–π–Ω–µ!\"","title":"üá∑üá∫ –†—É—Å—Å–∫–∏–º –≥—Ä–∞–∂–¥–∞–Ω–∞–º"},{"location":"#to-citizens-of-russia","text":"We at Laminas come from all over the world. Many of us have friends, family and colleagues in both Russia and Ukraine. Some of us were born in Russia. Some of us currently live in Russia. Some have grandparents who fought Nazis in World War II. Nobody here supports fascism. One team member has a Ukrainian relative who fled her home with her son. The train was delayed due to bombing on the road ahead. We have friends who are hiding in bomb shelters. We anxiously follow up on them after the air raids, which indiscriminately fire at hospitals, schools, kindergartens and houses. We're not taking this from any media. These are our actual experiences. You trust us enough to use our software. We ask that you trust us to say the truth on this. We need your help. Go out and protest this unnecessary war. Stop the bloodshed. Say \"stop the war!\" Migrate your code to laminas-servicemanager 4.x compatibility utilizing Rector rules.","title":"üá∫üá∏ To Citizens of Russia"},{"location":"#installation","text":"Run the following to install this library: $ composer require laminas/laminas-servicemanager-migration","title":"Installation"},{"location":"#documentation","text":"Browse the documentation online at https://docs.laminas.dev/laminas-servicemanager-migration/","title":"Documentation"},{"location":"#support","text":"Issues Forum","title":"Support"},{"location":"v1/intro/","text":"Introduction About Rector Rector is a console application for automated refactoring of PHP applications. It helps with: PHP upgrades Framework upgrades Code quality improvements Type coverage For more information about Rector, visit: getrector.org Using with Rector To use with Rector, you can create the following rector.php : use Laminas\\ServiceManager\\Migration\\Rector\\Set\\ValueObject\\SetList; use Rector\\Config\\RectorConfig; return static function (RectorConfig $rectorConfig): void { $rectorConfig-&gt;sets([SetList::LAMINAS_SERVICEMANGER_40]); $rectorConfig-&gt;paths([__DIR__ . '/module']); }; If you want to make renamed class type hint auto import enabled, you may use SetList::LAMINAS_SERVICEMANGER_40_AUTO_IMPORT set list, so the rector.php config will be as follow: use Laminas\\ServiceManager\\Migration\\Rector\\Set\\ValueObject\\SetList; use Rector\\Config\\RectorConfig; return static function (RectorConfig $rectorConfig): void { $rectorConfig-&gt;sets([SetList::LAMINAS_SERVICEMANGER_40_AUTO_IMPORT]); $rectorConfig-&gt;paths([__DIR__ . '/module']); }; Above, the Option::PATHS is paths we want rector to run. After configuration in place, you can run: vendor/bin/rector process --dry-run Ensure that the change is correct, if everything ok, we can run the fix: vendor/bin/rector process","title":"Introduction"},{"location":"v1/intro/#introduction","text":"","title":"Introduction"},{"location":"v1/intro/#about-rector","text":"Rector is a console application for automated refactoring of PHP applications. It helps with: PHP upgrades Framework upgrades Code quality improvements Type coverage For more information about Rector, visit: getrector.org","title":"About Rector"},{"location":"v1/intro/#using-with-rector","text":"To use with Rector, you can create the following rector.php : use Laminas\\ServiceManager\\Migration\\Rector\\Set\\ValueObject\\SetList; use Rector\\Config\\RectorConfig; return static function (RectorConfig $rectorConfig): void { $rectorConfig-&gt;sets([SetList::LAMINAS_SERVICEMANGER_40]); $rectorConfig-&gt;paths([__DIR__ . '/module']); }; If you want to make renamed class type hint auto import enabled, you may use SetList::LAMINAS_SERVICEMANGER_40_AUTO_IMPORT set list, so the rector.php config will be as follow: use Laminas\\ServiceManager\\Migration\\Rector\\Set\\ValueObject\\SetList; use Rector\\Config\\RectorConfig; return static function (RectorConfig $rectorConfig): void { $rectorConfig-&gt;sets([SetList::LAMINAS_SERVICEMANGER_40_AUTO_IMPORT]); $rectorConfig-&gt;paths([__DIR__ . '/module']); }; Above, the Option::PATHS is paths we want rector to run. After configuration in place, you can run: vendor/bin/rector process --dry-run Ensure that the change is correct, if everything ok, we can run the fix: vendor/bin/rector process","title":"Using with Rector"},{"location":"v1/migrate-implements-factory-interface-to-use-psr-container/","text":"Migrate Class Implements FactoryInterface to use Psr Container To migrate existing factory classes that implements Laminas\\ServiceManager\\Factory\\FactoryInterface , there is a Rector rule that can be used to migrate for that. For example, we have the following factory class: use My\\Service; use Interop\\Container\\ContainerInterface; use Laminas\\ServiceManager\\Factory\\FactoryInterface; class ServiceFactory implements FactoryInterface { public function __invoke(ContainerInterface $container, $requestedName, array $options = null) { return new Service(); } } We need to migrate to : use My\\Service; use Interop\\Container\\ContainerInterface; use Laminas\\ServiceManager\\Factory\\FactoryInterface; class ServiceFactory { public function __invoke(\\Psr\\Container\\ContainerInterface $container) { return new Service(); } } The steps to apply the changes are: Remove the interface from Factory class Replace invoke__() class method param and the use of Interop class in the class To apply that, we can register rector rule: Laminas\\ServiceManager\\Migration\\Rector\\Class_\\ImplementsFactoryInterfaceToPsrFactoryRector to our rector.php as an individual service: use Laminas\\ServiceManager\\Migration\\Rector\\Set\\ValueObject\\SetList; use Rector\\Config\\RectorConfig; return static function (RectorConfig $rectorConfig): void { $rectorConfig-&gt;sets([SetList::LAMINAS_SERVICEMANGER_40]); $rectorConfig-&gt;paths([__DIR__ . '/module']); // register ImplementsFactoryInterfaceToPsrFactoryRector service $rectorConfig-&gt;rule( \\Laminas\\ServiceManager\\Migration\\Rector\\Class_\\ImplementsFactoryInterfaceToPsrFactoryRector::class ); }; If we want to auto import, we can use LAMINAS_SERVICEMANGER_40_AUTO_IMPORT : use Laminas\\ServiceManager\\Migration\\Rector\\Set\\ValueObject\\SetList; use Rector\\Config\\RectorConfig; return static function (RectorConfig $rectorConfig): void { $rectorConfig-&gt;sets([SetList::LAMINAS_SERVICEMANGER_40_AUTO_IMPORT]); $rectorConfig-&gt;paths([__DIR__ . '/module']); // register ImplementsFactoryInterfaceToPsrFactoryRector service $rectorConfig-&gt;rule( \\Laminas\\ServiceManager\\Migration\\Rector\\Class_\\ImplementsFactoryInterfaceToPsrFactoryRector::class ); }; After configuration in place, we can run: vendor/bin/rector process --dry-run Ensure that the change is correct, if everything ok, we can run the fix: vendor/bin/rector process Additional Adjustment Add Return Type to Factory To add return type by new instance creation, the standard Rector rule ReturnTypeFromReturnNewRector can be used. Register the rule in rector.php : use Laminas\\ServiceManager\\Migration\\Rector\\Class_\\ImplementsFactoryInterfaceToPsrFactoryRector; use Laminas\\ServiceManager\\Migration\\Rector\\Set\\ValueObject\\SetList; use Rector\\Config\\RectorConfig; use Rector\\TypeDeclaration\\Rector\\ClassMethod\\ReturnTypeFromReturnNewRector; return static function (RectorConfig $rectorConfig): void { $rectorConfig-&gt;sets([SetList::LAMINAS_SERVICEMANGER_40_AUTO_IMPORT]); $rectorConfig-&gt;paths([__DIR__ . '/module']); $rectorConfig-&gt;rule(ImplementsFactoryInterfaceToPsrFactoryRector::class); $rectorConfig-&gt;rule(ReturnTypeFromReturnNewRector::class); }; Result: use My\\Service; use Psr\\Container\\ContainerInterface; use Laminas\\ServiceManager\\Factory\\FactoryInterface; class ServiceFactory { public function __invoke(ContainerInterface $container): Service { return new Service(); } } Sort Use Statements To sort the use statements for the factory a coding style tool can be used, for example: PHP_CodeSniffer with Slevomat Coding Standard .","title":"Migrate Implements FactoryInterface to use Psr Container"},{"location":"v1/migrate-implements-factory-interface-to-use-psr-container/#migrate-class-implements-factoryinterface-to-use-psr-container","text":"To migrate existing factory classes that implements Laminas\\ServiceManager\\Factory\\FactoryInterface , there is a Rector rule that can be used to migrate for that. For example, we have the following factory class: use My\\Service; use Interop\\Container\\ContainerInterface; use Laminas\\ServiceManager\\Factory\\FactoryInterface; class ServiceFactory implements FactoryInterface { public function __invoke(ContainerInterface $container, $requestedName, array $options = null) { return new Service(); } } We need to migrate to : use My\\Service; use Interop\\Container\\ContainerInterface; use Laminas\\ServiceManager\\Factory\\FactoryInterface; class ServiceFactory { public function __invoke(\\Psr\\Container\\ContainerInterface $container) { return new Service(); } } The steps to apply the changes are: Remove the interface from Factory class Replace invoke__() class method param and the use of Interop class in the class To apply that, we can register rector rule: Laminas\\ServiceManager\\Migration\\Rector\\Class_\\ImplementsFactoryInterfaceToPsrFactoryRector to our rector.php as an individual service: use Laminas\\ServiceManager\\Migration\\Rector\\Set\\ValueObject\\SetList; use Rector\\Config\\RectorConfig; return static function (RectorConfig $rectorConfig): void { $rectorConfig-&gt;sets([SetList::LAMINAS_SERVICEMANGER_40]); $rectorConfig-&gt;paths([__DIR__ . '/module']); // register ImplementsFactoryInterfaceToPsrFactoryRector service $rectorConfig-&gt;rule( \\Laminas\\ServiceManager\\Migration\\Rector\\Class_\\ImplementsFactoryInterfaceToPsrFactoryRector::class ); }; If we want to auto import, we can use LAMINAS_SERVICEMANGER_40_AUTO_IMPORT : use Laminas\\ServiceManager\\Migration\\Rector\\Set\\ValueObject\\SetList; use Rector\\Config\\RectorConfig; return static function (RectorConfig $rectorConfig): void { $rectorConfig-&gt;sets([SetList::LAMINAS_SERVICEMANGER_40_AUTO_IMPORT]); $rectorConfig-&gt;paths([__DIR__ . '/module']); // register ImplementsFactoryInterfaceToPsrFactoryRector service $rectorConfig-&gt;rule( \\Laminas\\ServiceManager\\Migration\\Rector\\Class_\\ImplementsFactoryInterfaceToPsrFactoryRector::class ); }; After configuration in place, we can run: vendor/bin/rector process --dry-run Ensure that the change is correct, if everything ok, we can run the fix: vendor/bin/rector process","title":"Migrate Class Implements FactoryInterface to use Psr Container"},{"location":"v1/migrate-implements-factory-interface-to-use-psr-container/#additional-adjustment","text":"","title":"Additional Adjustment"}]}